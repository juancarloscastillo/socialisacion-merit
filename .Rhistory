# Cuestionario estudiantes
est_proc$recompensa <- set_label(x = est_proc$recompensa, label = "Recompensa en la escuela estudiantes")
# Cuestionario estudiante
frq(est_proc$recompensa)
# Transformación a factor
est_proc$recompensa_factor <- factor(est_proc$recompensa, levels = c(1,2,3,4), labels = c("Muy en desacuerdo", "En desacuerdo", "De acuerdo", "Muy de acuerdo"))
# Etiquetar
est_proc$recompensa_factor <- set_label(est_proc$recompensa_factor, label = "Recomepensa en la escuela estudiantes factor")
# Cuestionario estudiantes
frq(est_proc$dependencia)
summary(est_proc$dependencia)
# Etiquetar
est_proc$dependencia <- set_label(est_proc$dependencia, label = "Dependencia estudiantes")
# Transformación a factor
est_proc$dependencia_factor <- factor(est_proc$dependencia, levels = c(1,2,3), labels = c("Municipal", "Part. Subvencionado", "Part. Privado"))
# Etiquetar
est_proc$dependencia_factor <- set_label(est_proc$dependencia_factor, label = "Dependencia estudiantes factor")
frq(ap_proc$perc_trabajo_duro)
ap_proc$perc_trabajo_duro <- set_na(ap_proc$perc_trabajo_duro, na = c(9), drop.levels = TRUE, as.tag = FALSE)
ap_proc$perc_trabajo_duro <- set_label(x = ap_proc$perc_trabajo_duro,label = "Percepcion meritocracia: Importancia trabajo duro apoderados")
frq(ap_proc$perc_trabajo_duro)
# Transformación a factor
ap_proc$perc_trabajo_duro_factor <- factor(ap_proc$perc_trabajo_duro, levels = c(1,2,3,4), labels = c("Nada importante", "Algo importante", "Importante", "Muy importante"))
# Etiquetar
ap_proc$perc_trabajo_duro_factor <- set_label(x = ap_proc$perc_trabajo_duro_factor, label = "Percepcion meritocracia: Importancia trabajo duro apoderados factor")
frq(ap_proc$perc_esfuerzo)
ap_proc$perc_esfuerzo <- set_na(ap_proc$perc_esfuerzo, na = c(9), drop.levels = TRUE, as.tag = FALSE)
ap_proc$perc_esfuerzo <- set_label(x = ap_proc$perc_esfuerzo, label = "Percepcion meritocracia: Esfuerzo para salir adelante apoderados")
frq(ap_proc$perc_esfuerzo)
# Transformación a factor
ap_proc$perc_esfuerzo_factor <- factor(ap_proc$perc_esfuerzo, levels = c(1,2,3,4), labels = c("Muy en desacuerdo","En desacuerdo", "De acuerdo", "Muy de acuerdo"))
# Etiquetar
ap_proc$perc_esfuerzo_factor <- set_label(x = ap_proc$perc_esfuerzo_factor, label = "Percepcion meritocracia: Esfuerzo para salir adelante apoderados factor")
# Crear variable
ap_proc$prom_percmer_ap <- ((ap_proc$perc_trabajo_duro + ap_proc$perc_esfuerzo)/2)
# Etiquetar
ap_proc$prom_percmer_ap <- set_label(x = ap_proc$prom_percmer_ap, label = "Promedio percepcion meritocratica apoderados")
frq(ap_proc$ingresos_tramos)
# Ingresos tramos
ap_proc$ingresos_tramos[ap_proc$ingresos_tramos == 12 | ap_proc$ingresos_tramos == 13] <- 99
# Etiquetar
ap_proc$ingresos_tramos <- set_labels(x = ap_proc$ingresos_tramos, labels = c("Menos de $101.000 mensuales líquidos" = 1,
"De $101.001 a $134.000 mensuales líquidos" = 2,
"De $134.001 a $179.000 mensuales líquidos" = 3,
"De $179.001 a $224.000 mensuales líquidos" = 4,
"De $224.001 a $291.000 mensuales líquidos" = 5,
"De $291.001 a $358.000 mensuales líquidos" = 6,
"De $358.001 a $448.000 mensuales líquidos" = 7,
"De $448.001 a $1.000.000 mensuales líquidos" = 8,
"De $1.000.001 a $2.000.000 mensuales líquidos" = 9,
"De $2.000.001 a $3.000.000 mensuales líquidos" = 10,
"Más de $3.000.000 mensuales líquidos" = 11,
"Ns/Nr" = 99))
# Drop levels
ap_proc$ingresos_tramos <- set_na(ap_proc$ingresos_tramos, na = c(12,13), drop.levels = TRUE, as.tag = FALSE)
ap_proc$ingresos_tramos <- set_label(x = ap_proc$ingresos_tramos,label = "Ingresos del hogar en tramos")
frq(ap_proc$ingresos_tramos)
# Construcción ingresos numerico
ap_proc$ingresos[ap_proc$ingresos_tramos == 1] <- 50500
ap_proc$ingresos[ap_proc$ingresos_tramos == 2] <- 117500
ap_proc$ingresos[ap_proc$ingresos_tramos == 3] <- 156500
ap_proc$ingresos[ap_proc$ingresos_tramos == 4] <- 201500
ap_proc$ingresos[ap_proc$ingresos_tramos == 5] <- 257500
ap_proc$ingresos[ap_proc$ingresos_tramos == 6] <- 324500
ap_proc$ingresos[ap_proc$ingresos_tramos == 7] <- 403000
ap_proc$ingresos[ap_proc$ingresos_tramos == 8] <- 724000
ap_proc$ingresos[ap_proc$ingresos_tramos == 9] <- 1500000
ap_proc$ingresos[ap_proc$ingresos_tramos == 10] <- 2500000
ap_proc$ingresos[ap_proc$ingresos_tramos == 11] <- 3500000
# Construcción ingreso per capita
ap_proc$ingresos_pc <- ap_proc$ingresos/ap_proc$personas_hogar
ap_proc$ingresos_pc <- trunc(ap_proc$ingresos_pc)
# Construcción ingreso tramos como factor
ap_proc$ingresos_tramos_factor <- factor(ap_proc$ingresos_tramos, levels = c(1,2,3,4,5,6,7,8,9,10,11,99), labels = c("Menos de $101.000 mensuales líquidos",
"De $101.001 a $134.000 mensuales líquidos",
"De $134.001 a $179.000 mensuales líquidos",
"De $179.001 a $224.000 mensuales líquidos",
"De $224.001 a $291.000 mensuales líquidos",
"De $291.001 a $358.000 mensuales líquidos",
"De $358.001 a $448.000 mensuales líquidos",
"De $448.001 a $1.000.000 mensuales líquidos",
"De $1.000.001 a $2.000.000 mensuales líquidos",
"De $2.000.001 a $3.000.000 mensuales líquidos",
"Más de $3.000.000 mensuales líquidos",
"Ns/Nr"))
# Construccion ingresos per capita quintiles
ap_proc <- ap_proc %>% mutate(quintiles_ingresos_pc = ntile(ingresos_pc,5))
## Recuperar NA
ap_proc$quintiles_ingresos_pc[is.na(ap_proc$quintiles_ingresos_pc)] <- 99
# Construcción ingresos per capita quintiles factor
ap_proc$quintiles_ingresos_pc_factor <- factor(ap_proc$quintiles_ingresos_pc, levels = c(1,2,3,4,5,99), labels = c("Quintil 1", "Quintil 2", "Quintil 3", "Quintil 4", "Quintil 5", "Ns/Nr"))
## Eliminar 99 de la variable numerica
ap_proc$quintiles_ingresos_pc[ap_proc$quintiles_ingresos_pc == 99] <- NA
# ---- Descripción variables nuevas ----
# ingresos
summary(ap_proc$ingresos)
# ingresos per capita
summary(ap_proc$ingresos_pc)
# ingresos tramos factor
frq(ap_proc$ingresos_tramos_factor)
#---- Etiquetado variables nuevas ----
#ingreso
ap_proc$ingresos <- set_label(x = ap_proc$ingresos, label = "Ingresos del hogar")
# ingreso per capita
ap_proc$ingresos_pc <- set_label(x = ap_proc$ingresos_pc, label = "Ingreso per capita")
# ingreso factor
ap_proc$ingresos_tramos_factor <- set_label(x = ap_proc$ingresos_tramos_factor, label = "Ingresos del hogar en tramos factor")
# Cuestionario apoderados
frq(ap_proc$educ)
# Cuestionario apoderados
ap_proc$educ <- set_na(ap_proc$educ, na = c(9), drop.levels = TRUE, as.tag = FALSE)
# Cuestionario apoderados
ap_proc$educ <- set_label(x = ap_proc$educ, label = "Educacion del apoderado")
# Cuestionario apoderados
frq(ap_proc$educ)
# Edad apoderados
frq(ap_proc$nacimiento)
ap_proc$nacimiento[ap_proc$nacimiento == 9999] <- NA
ap_proc$nacimiento[ap_proc$nacimiento > 1992] <- NA
ap_proc$nacimiento <- set_label(x = ap_proc$nacimiento, label = "Nacimiento apoderado")
# Edad apoderados
frq(ap_proc$nacimiento)
# Crear variable edad
ap_proc$edad_ap <- 2019 - ap_proc$nacimiento
# ---- Descriptivo nueva variable ----
summary(ap_proc$edad_ap)
# ---- Etiquetado variables nuevas ----
ap_proc$edad_ap <- set_label(x = ap_proc$edad_ap, label = "Edad apoderado")
freq(ap_proc$dem_desig)
ap_proc$dem_desig <- set_na(ap_proc$dem_desig, na = c(9), drop.levels = TRUE, as.tag = FALSE)
ap_proc$genero <- set_label(x = ap_proc$genero, label = "Las diferencias económicas en Chile son demasiado grandes")
freq(ap_proc$dem_desig)
# Genero apoderados
frq(ap_proc$genero)
# Genero apoderados
ap_proc$genero <- set_na(ap_proc$genero, na = c(9), drop.levels = TRUE, as.tag = FALSE)
# Genero apoderados
ap_proc$genero <- set_label(x = ap_proc$genero, label = "Genero apoderados")
# Genero apoderados
frq(ap_proc$genero)
# Transformación a factor
ap_proc$genero_factor <- factor(ap_proc$genero, levels = c(1,2,3), labels = c("Hombre", "Mujer", "Otro"))
# Etiquetar
ap_proc$genero_factor <- set_label(x = ap_proc$genero_factor, label = "Genero apoderados factor")
# Posición política apoderados
frq(ap_proc$pos_pol)
summary(ap_proc$pos_pol)
# Posicion politica apoderados
ap_proc$pos_pol[ap_proc$pos_pol == 8 | ap_proc$pos_pol == 9] <- 99
ap_proc$pos_pol <- set_labels(ap_proc$pos_pol,
labels=c("Derecha" = 1,
"Centro derecha" = 2,
"Centro" = 3,
"Centro Izquierda" = 4,
"Izquierda" = 5,
"Independiente" = 6,
"Ninguna" = 7,
"Ns/Nr"=99)) #Etiquetado categorías
# Posición política apoderados
ap_proc$pos_pol <- set_label(x = ap_proc$pos_pol, label = "Posicion politica apoderados")
# Posición política apoderados
frq(ap_proc$pos_pol)
# Transformación a factor
ap_proc$pos_pol_factor <- factor(ap_proc$pos_pol, levels = c(1,2,3,4,5,6,7,99), labels = c("Derecha", "Centro Derecha", "Centro", "Centro Izquierda", "Izquierda", "Independiente", "Ninguna", "Ns/Nr"))
# Etiquetar
ap_proc$pos_pol_factor <- set_label(x = ap_proc$pos_pol_factor, label = "Posición política apoderados factor")
# Cuestionario apoderados
frq(ap_proc$libros_hogar)
# Cuestionarios apoderados
ap_proc$libros_hogar <- set_na(ap_proc$libros_hogar, na = c(9), drop.levels = TRUE, as.tag = FALSE)
# Cuestionario apoderados
ap_proc$libros_hogar <- set_label(x = ap_proc$libros_hogar, label = "Libros en el hogar apoderados")
# Cuestionario apoderados
frq(ap_proc$libros_hogar)
# Transformación a factor
ap_proc$libros_hogar_factor <- factor(ap_proc$libros_hogar, levels = c(1,2,3,4,5,6), labels = c("Entre 0 y 10 libros", "Entre 11 y 25 libros", "Entre 26 y 100 libros", "Entre 101 y 200 libros", "Entre 201 y 500 libros", "Más de 500 libros"))
# Etiquetar
ap_proc$libros_hogar_factor <- set_label(x = ap_proc$libros_hogar_factor, label = "Libros en el hogar apoderados factor")
# Cuestionario apoderados
frq(ap_proc$region)
# Cuestionario apoderados
ap_proc$region <- set_label(x = ap_proc$region, label = "Region")
# Transformación a factor
ap_proc$region_factor <- factor(ap_proc$region, levels = c(2,7,13), labels = c("Región de Antofagasta", "Región del Maule", "Región Metropolitana"))
# Etiquetar
ap_proc$region_factor <- set_label( x = ap_proc$region_factor, label = "Region apoderados factor")
# Cuestionario apoderados
frq(ap_proc$recompensa)
# Cuestionario apoderados
ap_proc$recompensa <- set_na(ap_proc$recompensa, na = c(9), drop.levels = TRUE, as.tag = FALSE)
# Cuestionario apoderados
ap_proc$recompensa <- set_label(x = ap_proc$recompensa, label = "Recompensa en la escuela apoderados")
# Cuestionario apoderados
frq(ap_proc$recompensa)
# Transformación a factor
ap_proc$recompensa_factor <- factor(ap_proc$recompensa, levels = c(1,2,3,4), labels = c("Muy en desacuerdo", "En desacuerdo", "De acuerdo", "Muy de acuerdo"))
# Etiquetar
ap_proc$recompensa_factor <- set_label(x = ap_proc$recompensa_factor, label = "Recompensa en la escuela apoderados factor")
frq(ap_proc$personas_hogar)
ap_proc$personas_hogar[ap_proc$personas_hogar == 999] <- NA
ap_proc$personas_hogar <- set_label(x = ap_proc$personas_hogar, label = "Cantidad de personas en el hogar")
frq(ap_proc$personas_hogar)
# Ingresos a nivel escuela
ap_proc <- ap_proc %>%
group_by(rbd) %>%
mutate(ingresos_esc = mean(ingresos, na.rm = T))
# Ingresos per capita a nivel escuela
ap_proc <- ap_proc %>%
group_by(rbd) %>%
mutate(ingresos_pc_esc = mean(ingresos_pc, na.rm = T))
#---- Descriptivos variables nuevas----
# Ingresos a nivel escuela
summary(ap_proc$ingresos_esc)
# Ingresos per capita a nivel escuela
summary(ap_proc$ingresos_pc_esc)
#---- Etiquetado variables nuevas----
# Ingresos a nivel escuela
ap_proc$ingresos_esc <- set_label(x = ap_proc$ingresos_esc, label = "Ingresos por escuela")
# Ingresos per capita a nivel escuela
ap_proc$ingresos_pc_esc <- set_label(x = ap_proc$ingresos_pc_esc, label = "Ingreso per capita por escuela")
# Construcción educación terciara apoderado por escuela
ap_proc$univ<- ifelse(ap_proc$educ==4,1,0)
ap_proc <- ap_proc %>%
group_by(rbd) %>%
mutate(univ_esc = mean(univ, na.rm = T))
# ---- Descriptivos nuevas variables ----
frq(ap_proc$univ)
summary(ap_proc$univ_esc)
#---- Etiquetado nuevas variables ----
ap_proc$univ <- set_label(x = ap_proc$univ, label = "Educacion terciaria apoderados") # Etiquetado variable
ap_proc$univ <- set_labels(ap_proc$univ,
labels=c( "Universitario"=1,
"No universitario"=0)) #Etiquetado categorias
ap_proc$univ_esc <- set_label(x = ap_proc$univ_esc, label = "Porcentaje ed. terciaria por escuela")
# Cuesitionarios apoderados
frq(ap_proc$dependencia)
summary(ap_proc$dependencia)
# Etiquetar
ap_proc$dependencia <- set_label(x = ap_proc$dependencia, label = "Dependencia apoderados")
# Transformacion a factor
ap_proc$dependencia_factor <- factor(ap_proc$dependencia, levels = c(1,2,3), labels = c("Municipal", "Part. Subvencionado", "Part. Privado"))
# Etiquetar
ap_proc$dependencia_factor <- set_label(x = ap_proc$dependencia_factor, label = "Dependencia apoderados factor")
# Construccion heterogeneidad
ap_proc <- ap_proc %>%
group_by(rbd) %>%
mutate(heterogen_esc = sd(ingresos, na.rm = T))
#---- Descriptivo variables nuevas ----
summary(ap_proc$heterogen_esc)
#---- Etiquetado variables nuevas ----
ap_proc$heterogen_esc <- set_label(x = ap_proc$heterogen_esc, label = "Heterogeneidad de la escuela")
# Join
ap_est <- left_join(x = est_proc,y = ap_proc,by =c("folio"="folio"),suffix=c("_est","_ap"))
# Guardar respuestas del nivel educacional de los padres. Si no respondió, se incluye la respuesta más alta reportada por los estudiantes.
ap_est$educ_ap <- ifelse(is.na(ap_est$educ), ap_est$educ_padres, ap_est$educ)
ap_est$educ_ap <- set_label(x = ap_est$educ,label = "Nivel educacional de los apoderados")
# Transformacion a factor
ap_est$educ_factor_ap <- factor(ap_est$educ_ap, levels = c(1,2,3,4), labels = c("8vo básico o menos", "Educación media", "Educación Técnica Superior", "Educación universitaria o posgrado"))
# Etiquetar
ap_est$educ_factor_ap <- set_label(x = ap_est$educ_factor_ap,label = "Nivel educacional de los apoderados factor")
# Centrado a la media grupal (CWC)
## Promedio percepción meritocracia apoderados
ap_est$prom_percmer_ap_cwc <- center(ap_est$prom_percmer_ap, type = "CWC", group = ap_est$rbd_est)
ap_est$prom_percmer_ap_cwc <- set_label(x = ap_est$prom_percmer_ap_cwc, label = "Promedio percepcion meritocratica apoderados CWC")
## Sentido justicia indirecto Ln
ap_est$sj_indirect_ln_cwc <- center(ap_est$sj_indirect_ln, type = "CWC", group = ap_est$rbd_est)
ap_est$sj_indirect_ln_cwc <- set_label(x = ap_est$sj_indirect_ln_cwc, label = "Sentido justicia indirecto ln CWC")
## Sentido justicia directo
ap_est$sj_direct_cwc <- center(ap_est$sj_direct, type = "CWC", group = ap_est$rbd_est)
ap_est$sj_direct_cwc < set_label(x = ap_est$sj_direct_cwc, label = "Sentido justicia directo CWC")
## Region estudiante
#ap_est$region_est_cwc <- center(ap_est$region_est, type = "CWC", group = ap_est$rbd_est)
# Error: Vector in 'x' is specified as level-1 predictor does not have any within-group variance.
## Posición Política estudiante
ap_est$pos_pol_est_cwc <- center(ap_est$pos_pol_est, type = "CWC", group = ap_est$rbd_est)
ap_est$pos_pol_est_cwc <- set_label(x = ap_est$pos_pol_est_cwc, "Posicion politica estudiantes CWC")
## Genero estudiante
ap_est$genero_est_cwc <- center(ap_est$genero_est, type = "CWC", group = ap_est$rbd_est)
ap_est$genero_est_cwc <- set_label(x = ap_est$genero_est_cwc, label = "Genero estudiantes CWC")
## Recompensa estudiante
ap_est$recompensa_est_cwc <- center(ap_est$recompensa_est, type = "CWC", group = ap_est$rbd_est)
ap_est$recompensa_est_cwc <- set_label(x = ap_est$recompensa_est_cwc, label = "Recompensa en la escuela estudiantes CWC")
## La opinion es tomada en cuenta por los profesores
ap_est$resp_porf_cwc <- center(ap_est$resp_porf, type = "CWC", group = ap_est$rbd_est)
ap_est$resp_porf_cwc <- set_label(x = ap_est$resp_porf_cwc, label = "Opiniones tomadas en cuenta por profesores CWC")
## Posición Política apoderado
ap_est$pos_pol_ap_cwc <- center(ap_est$pos_pol_ap, type = "CWC", group = ap_est$rbd_est)
ap_est$pos_pol_ap_cwc <- set_label(x = ap_est$pos_pol_ap_cwc, label = "Posicion politica apoderados CWC" )
## Genero apoderado
ap_est$genero_ap_cwc <- center(ap_est$genero_ap, type = "CWC", group = ap_est$rbd_est)
ap_est$genero_ap_cwc <- set_label(x = ap_est$genero_ap_cwc, label = "Genero apoderados CWC")
## Educación apoderado
ap_est$educ_ap_cwc <- center(ap_est$educ_ap, type = "CWC", group = ap_est$rbd_est)
ap_est$educ_ap_cwc <- set_label(x = ap_est$educ_ap_cwc, label = "Nivel educacional más alto apoderados CWC")
## Libros Hogar apoderado
ap_est$libros_hogar_ap_cwc <- center(ap_est$libros_hogar_ap, type = "CWC", group = ap_est$rbd_est)
ap_est$libros_hogar_ap_cwc <- set_label(x = ap_est$libros_hogar_ap_cwc, label = "Libros en el hogar apoderados CWC")
## Recompensa apoderado
ap_est$recompensa_ap_cwc <- center(ap_est$recompensa_ap, type = "CWC", group = ap_est$rbd_est)
ap_est$recompensa_ap_cwc <- set_label(x = ap_est$recompensa_ap_cwc, label = "Recompensa en la escuela apoderados CWC")
## Dependencia apoderado
#ap_est$dependencia_ap_cwc <- center(ap_est$dependencia_ap, type = "CWC", group = ap_est$rbd_est)
## Error in if (all(tapply(x, group, var, na.rm = TRUE) == 0)) { :valor ausente donde TRUE/FALSE es necesario
## Edad apoderado
ap_est$edad_ap_cwc <- center(ap_est$edad_ap, type = "CWC", group = ap_est$rbd_est)
ap_est$edad_ap_cwc <- set_label(x = ap_est$edad_ap_cwc, label = "Edad apoderados CWC")
# Tabla general
print(dfSummary(ap_est, headings = FALSE,varnumbers = F),method = "render")
# Guardar base de datos conjunta
save(ap_est, file = "../input/data/ap_est.RData")
# Guardar base de datos apoderados
save(ap_proc, file = "../input/data/ap_proc.RData")
# Guardar base de datos estudiantes
save(est_proc, file = "../input/data/est_proc.RData")
basecor <- ap_est %>% select(prom_percmer_est_cwc,prom_percmer_ap_cwc, recompensa_est_cwc, resp_porf_cwc, sj_direct_cwc)
basecor <- ap_est %>% select(prom_percmer_est,prom_percmer_ap_cwc, recompensa_est_cwc, resp_porf_cwc, sj_direct_cwc)
basecor <- na.omit(basecor)
correcom <- cor(basecor)
corrplot(correcom,
method = "color",
type = "upper",
tl.col = "black",
addCoef.col = "black",
diag = TRUE,
family = "A",
number.font = 6,
tl.cex =0.75,
number.cex = 1)
basecor <- ap_est %>% select(prom_percmer_est,prom_percmer_ap_cwc, sj_direct_cwc, recompensa_est_cwc, resp_porf_cwc)
basecor <- na.omit(basecor)
correcom <- cor(basecor)
#png("output/results/corplot_totscores.png",width=600,height=600)
windowsFonts(A = windowsFont("Times New Roman"))
rownames(correcom) <-c(
"A. Percepción de meritocracia estudiantes",
"B. Percepción de meritocracia apoderados",
"C. Sentido de justicia en las notas",
"D. Sensación de recompenza justa en la escuela",
"E. Percepción meritocratica Apoderado",
"F. Justicia procesal del profesor")
basecor <- ap_est %>% select(prom_percmer_est,prom_percmer_ap_cwc, sj_direct_cwc, recompensa_est_cwc, resp_porf_cwc)
basecor <- na.omit(basecor)
correcom <- cor(basecor)
#png("output/results/corplot_totscores.png",width=600,height=600)
windowsFonts(A = windowsFont("Times New Roman"))
rownames(correcom) <-c(
"A. Percepción de meritocracia estudiantes",
"B. Percepción de meritocracia apoderados",
"C. Sentido de justicia en las notas",
"D. Sensación de recompenza justa en la escuela",
"E. Justicia procesal del profesor")
colnames(correcom) <-c("(A)", "(B)","(C)","(D)","(E)","(F)")
basecor <- ap_est %>% select(prom_percmer_est,prom_percmer_ap_cwc, sj_direct_cwc, recompensa_est_cwc, resp_porf_cwc)
basecor <- na.omit(basecor)
correcom <- cor(basecor)
#png("output/results/corplot_totscores.png",width=600,height=600)
windowsFonts(A = windowsFont("Times New Roman"))
rownames(correcom) <-c(
"A. Percepción de meritocracia estudiantes",
"B. Percepción de meritocracia apoderados",
"C. Sentido de justicia en las notas",
"D. Sensación de recompenza justa en la escuela",
"E. Justicia procesal del profesor")
colnames(correcom) <-c("(A)", "(B)","(C)","(D)","(E)")
corrplot(
correcom,
method = "color",
type = "upper",
tl.col = "black",
addCoef.col = "black",
diag = TRUE,
family = "A",
number.font = 6,
tl.cex =0.75,
number.cex = 1)
basecor <- ap_est %>% select(prom_percmer_est,prom_percmer_ap_cwc, sj_direct_cwc, recompensa_est_cwc, resp_porf_cwc)
basecor <- na.omit(basecor)
correcom <- cor(basecor)
png("../output/images/corplot.png",width=600,height=600)
windowsFonts(A = windowsFont("Times New Roman"))
rownames(correcom) <-c(
"A. Percepción de meritocracia estudiantes",
"B. Percepción de meritocracia apoderados",
"C. Sentido de justicia en las notas",
"D. Sensación de recompenza justa en la escuela",
"E. Justicia procesal del profesor")
colnames(correcom) <-c("(A)", "(B)","(C)","(D)","(E)")
corrplot(
correcom,
method = "color",
type = "upper",
tl.col = "black",
addCoef.col = "black",
diag = TRUE,
family = "A",
number.font = 6,
tl.cex =0.75,
number.cex = 1)
dev.copy()
basecor <- ap_est %>% select(prom_percmer_est,prom_percmer_ap_cwc, sj_direct_cwc, recompensa_est_cwc, resp_porf_cwc)
basecor <- na.omit(basecor)
correcom <- cor(basecor)
png("../output/images/corplot.png",width=600,height=600)
windowsFonts(A = windowsFont("Times New Roman"))
rownames(correcom) <-c(
"A. Percepción de meritocracia estudiantes",
"B. Percepción de meritocracia apoderados",
"C. Sentido de justicia en las notas",
"D. Sensación de recompenza justa en la escuela",
"E. Justicia procesal del profesor")
colnames(correcom) <-c("(A)", "(B)","(C)","(D)","(E)")
corrplot(
correcom,
method = "color",
type = "upper",
tl.col = "black",
addCoef.col = "black",
diag = TRUE,
family = "A",
number.font = 6,
tl.cex =0.75,
number.cex = 1)
dev.off()
![](../output/images/corplot.ong)
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "socialisacion-merit"
# 2. Run this code.4
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs",quiet = FALSE) # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",  x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",  x = dir(path = "docs"),value = T), # for .Rmd
grep("_cache",x = dir(path = "docs"),value = T),            # for files within the "_cache" folder
grep("^prod_.*\\_cache$",  x = dir(path = "docs"),value = T), #
grep("^prod_.*\\.R$",    x = dir(path = "docs"),value = T), # for .R
".tex",".log",".RData",".Rhistory")                         # for .tex .log .RData .Rhistory
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files from /docs folder4
unlink(paste0("docs/",(ext[i])),recursive = TRUE)             # Remove the cache files (first)
}
for (i in 1:length(ext)) {
unlink(paste0("docs/",(ext[i])),recursive = TRUE) # Remove the cache folders (second)
}
# [ALTERNATIVE:] delete files from /production folder (in case you previously rendered these files)
prod.files <- c(grep("^prod_.*\\_cache$",x = dir(path = "production"),value = T),
grep("^prod_.*\\_files$",x = dir(path = "production"),value = T),
grep("^prod_.*\\.html$" ,x = dir(path = "production"),value = T),
".RData",".Rhistory"
)
for (i in 1:length(prod.files)) {
file.remove(paste0("production/",dir(path="production", pattern=prod.files[i]))) # delete residual files /production folder
unlink(paste0("production/",(prod.files[i])),recursive = TRUE)                   # delete files within the "_cache" and "_files" folders
}
# Display the site --------------------------------------------------------
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
# rmarkdown::clean_site("docs")
# Render site ------------------------------------------------------------
###### logic
# there are some limitations for rendering websites in Rmarkdown/Githubpages
# as all files should be in a same directory, which goes against the logic
# of a clean and organized folder structure. Therefore, this script:
# 1. bring all necessary files to the "docs" folder, where the site files are hosted
# 2. renders the site from this location (docs folder)
# 3. delete the Rmd files that where brought in step 1, leaving only the html files
# INSTRUCTIONS-------------------------:
# 1. set your root dir at "socialisacion-merit"
# 2. Run this code.4
production<- list.files(path = "production",pattern = "prod_")        # a list with the names of the files to copy
file.copy(file.path("production",production), "docs",overwrite = TRUE)# copy data proc and analysis files
rmarkdown::render_site("docs",quiet = FALSE) # Render site
# before you run this line, check if your R Markdown files have a .rmd or .Rmd extension
# on this case we use both
ext <- c(grep("^prod_.*\\.rmd$",  x = dir(path = "docs"),value = T), # for .rmd
grep("^prod_.*\\.Rmd$",  x = dir(path = "docs"),value = T), # for .Rmd
grep("_cache",x = dir(path = "docs"),value = T),            # for files within the "_cache" folder
grep("^prod_.*\\_cache$",  x = dir(path = "docs"),value = T), #
grep("^prod_.*\\.R$",    x = dir(path = "docs"),value = T), # for .R
".tex",".log",".RData",".Rhistory")                         # for .tex .log .RData .Rhistory
for (i in 1:length(ext)) {
file.remove(paste0("docs/",dir(path="docs", pattern=ext[i]))) # delete files from /docs folder4
unlink(paste0("docs/",(ext[i])),recursive = TRUE)             # Remove the cache files (first)
}
for (i in 1:length(ext)) {
unlink(paste0("docs/",(ext[i])),recursive = TRUE) # Remove the cache folders (second)
}
# [ALTERNATIVE:] delete files from /production folder (in case you previously rendered these files)
prod.files <- c(grep("^prod_.*\\_cache$",x = dir(path = "production"),value = T),
grep("^prod_.*\\_files$",x = dir(path = "production"),value = T),
grep("^prod_.*\\.html$" ,x = dir(path = "production"),value = T),
".RData",".Rhistory"
)
for (i in 1:length(prod.files)) {
file.remove(paste0("production/",dir(path="production", pattern=prod.files[i]))) # delete residual files /production folder
unlink(paste0("production/",(prod.files[i])),recursive = TRUE)                   # delete files within the "_cache" and "_files" folders
}
# Display the site --------------------------------------------------------
browseURL(url = "docs/index.html")
# Keep only the original .rmd files (site), configuration (_site.yml and _config.yml)
# and prod_ folders (cache and files)
# rmarkdown::clean_site("docs")
